describe("LuaForth", function()
	it("should not have syntax errors in it's code.", function()
		assert.truthy(pcall(require, "luaforth"))
	end)
	describe("should, when given simple_env, be able to", function()
		local luaforth = require("luaforth")
		describe("use [L and L] to", function()
			describe("push a", function()
				it("number", function()
					local stack = luaforth.eval("[L return 123 L]", luaforth.simple_env)
					assert.are.equals(stack[1], 123)
				end)
				it("string", function()
					local stack = luaforth.eval("[L return 'Hello world!' L]", luaforth.simple_env)
					assert.are.equals(stack[1], "Hello world!")
				end)
				it("boolean", function()
					local stack = luaforth.eval("[L return true L]", luaforth.simple_env)
					assert.is_true(stack[1])
				end)
			end)
		end)
		describe("use %L to", function()
			it("eval a whole line of lua", function()
				local stack = luaforth.eval("%L return 'Tomato!'", luaforth.simple_env)
				assert.are.equals(stack[1], "Tomato!")
			end)
			it("eval two lines of lua", function()
				local stack = luaforth.eval("%L return 'Tomato!'\n%L return 'Another tomato!'\n", luaforth.simple_env)
				assert.are.equals(stack[1], "Tomato!")
				assert.are.equals(stack[2], "Another tomato!")
			end)
		end)
		it("define words", function()
			local stack = luaforth.eval(": hello [L return 'Hello world!' L] ; hello", luaforth.simple_env)
			assert.are.equals(stack[1], "Hello world!")
		end)
	end)
end)
